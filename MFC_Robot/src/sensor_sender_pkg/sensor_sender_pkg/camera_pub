import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy
from cv_bridge import CvBridge
import cv2 as cv

class CameraPublisher(Node):
    def __init__(self):
        super().__init__('camera_publisher')
        
        qos_profile = QoSProfile(
            reliability=ReliabilityPolicy.BEST_EFFORT,
            durability=DurabilityPolicy.VOLATILE,
            depth=10
        )
        
        self.bridge = CvBridge()
        self.publisher = self.create_publisher(Image, '/camera/image_raw', qos_profile)

        self.camera = cv.VideoCapture('/dev/video0', cv.CAP_V4L2)
        self.camera.set(cv.CAP_PROP_FRAME_WIDTH, 320)
        self.camera.set(cv.CAP_PROP_FRAME_HEIGHT, 240)
        self.camera.set(cv.CAP_PROP_FPS, 15)

        if not self.camera.isOpened():
            self.get_logger().error('카메라를 열 수 없습니다.')
            raise RuntimeError('Failed to open camera')

        self.timer = self.create_timer(0.03, self.publish_frame)

    def publish_frame(self):
        ret, frame = self.camera.read()
        if not ret:
            self.get_logger().error('카메라에서 프레임을 읽을 수 없습니다.')
            return

        msg = self.bridge.cv2_to_imgmsg(frame, 'bgr8')
        self.publisher.publish(msg)

    def destroy_node(self):
        super().destroy_node()
        if self.camera.isOpened():
            self.camera.release()

def main(args=None):
    rclpy.init(args=args)
    node = CameraPublisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
